{
	"info": {
		"_postman_id": "00456fa7-6e27-4bf4-988c-766df26e2638",
		"name": "Team1_Postman Pathfinder",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "User Login",
			"item": [],
			"id": "e929d061-33f3-4afe-ae6f-86d0c987e4a9"
		},
		{
			"name": "Dietician1",
			"item": [],
			"id": "128b6533-e6fc-442a-903f-88d5781ef601"
		},
		{
			"name": "Dietician2",
			"item": [],
			"id": "14c458e0-d9ea-414a-a9c1-2808cb8e1462"
		},
		{
			"name": "Patient1",
			"item": [],
			"id": "6b1608a3-44fa-4d04-8cb9-e161f6b5187d"
		},
		{
			"name": "Patient2",
			"item": [],
			"id": "b0b1c889-65bf-4c5b-810a-7becf804f534"
		},
		{
			"name": "Patient3",
			"item": [],
			"id": "fcb087f1-27cd-4c36-ab19-7f86335619e4"
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "admin_login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bf1ca8f-c9ac-4ff2-a268-1756a13a7d45",
								"exec": [
									"var adminToken = pm.response.json().token;",
									"pm.environment.set(\"adToken\", adminToken);",
									"console.log(pm.environment.get(\"adToken\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d47b2a74-63de-46a1-be1a-25a9fcfe39cb",
								"exec": [
									"/*let newrequestBodyObj = pm.variables.get('RequestBody');",
									"pm.variables.set('AdminRequest', JSON.stringify(newrequestBodyObj));",
									"//pm.request.body.update(JSON.stringify(newrequestBodyObj));",
									"console.log(\"Request body password:\", newrequestBodyObj.password);",
									"console.log(\"Request body loginemail:\", newrequestBodyObj.userLoginEmail);*/",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "22c2f42f-9b0a-40e2-836d-4843e49c0de5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"password\": \"test\", \"userLoginEmail\": \"Team1@gmail.com\"}\n//{{AdminRequest}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "dietician_login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19e96b34-d7df-4a3c-b2f2-3e6b8b773b6f",
								"exec": [
									"var dieticianToken = pm.response.json().token;",
									"pm.environment.set(\"dieticianToken\", dieticianToken);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cfe9ad5a-a2a8-4b35-8cba-a118366163c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"Arches45\",\n  \"userLoginEmail\": \"diet_1@ninja.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "all_morbidities_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30ae605c-8c9f-441f-81d5-47b442b5a545",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"//Get the response JSON",
									"var response = pm.response.json();",
									"",
									"// Check if the response is an array",
									"pm.test(\"Get all Morbidities Response is an array\", function () {",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"// Iterate through the array to validate each object",
									"response.forEach(function(item) {",
									"    // Check the presence of all required keys",
									"    pm.test(\"Get all Morbidities - Validate Morbidity key fields \", function () {",
									"        pm.expect(item).to.have.keys([",
									"            'morbidityId',",
									"            'morbidityTestId',",
									"            'morbidityNameRegex',",
									"            'morbidityTestName',",
									"            'morbidityTestUnit',",
									"            'morbidityMarkerMinVal',",
									"            'morbidityMarkerMaxVal'",
									"        ]);",
									"    });",
									"",
									"    // Check the type of each key",
									"    pm.test(\"Type validation for response item keys\", function () {",
									"        pm.expect(item.morbidityId).to.be.a('number');",
									"        pm.expect(item.morbidityTestId).to.be.a('string');",
									"        pm.expect(item.morbidityNameRegex).to.be.a('string');",
									"        pm.expect(item.morbidityTestName).to.be.a('string');",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string');",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number');",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number');",
									"    });",
									"",
									"    // Check accepted values for morbidityTestName",
									"    pm.test(\"Validate accepted values for morbidityTestName\", function () {",
									"        const acceptedValues = [",
									"            \"Fasting Glucose\",\"Average Glucose\", \"Plasma Glucose\", \"HbA1c\", \"TSH\", \"T3\", \"T4\",\"Blood Pressure Levels\"",
									"        ];",
									"        pm.expect(acceptedValues).to.include(item.morbidityTestName);",
									"    });",
									"",
									"    // Check accepted values for morbidityTestUnit",
									"    pm.test(\"Validate accepted values for morbidityTestUnit for \" +item.morbidityTestId, function () {",
									"        const acceptedValues = [",
									"            \"mg/dL\", \"%\", \"μIU/ml\", \"uIU/ml\", \"ng/dL\", \"ng/mL\", \"pg/mL\", \"nmol/L\",\"μg/dL\", \"ug/dL\", \"mm Hg\",\"mIU/L\"",
									"        ];",
									"        pm.expect(acceptedValues).to.include(item.morbidityTestUnit);",
									"    });",
									"",
									"    // Validation: Min value should be less than Max value",
									"    pm.test(\"Min value should be less than Max value for \" +item.morbidityTestId, function () {",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.lessThan(item.morbidityMarkerMaxVal);",
									"    ",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c488c52-b852-4350-b810-ccc92fd52443",
								"exec": [
									"/*const token = pm.globals.get(\"adminToken\");",
									"console.log(pm.globals.get(\"adminToken\"))",
									"console.log(token);",
									"",
									"if(token) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: `Bearer ${token}`",
									"    });",
									"} else {",
									"    console.error(\"admin token not found in global variables\")",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "30a5fee3-e457-4c24-8165-4335d1910e6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
					},
					"response": []
				},
				{
					"name": "all_morbidities_dietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2fe57c25-a2e9-4a06-b29f-cabe6168e0e6",
								"exec": [
									"/*const token2 = pm.globals.get(\"dieticianToken\");",
									"if(token2) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: 'Bearer ${token2}'",
									"    });",
									"} else {",
									"    console.error(\"dietician token not found in global variables\")",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "354dfa50-132a-4d9c-90b6-9e113bf34a85",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"//Get the response JSON",
									"var response = pm.response.json();",
									"",
									"// Check if the response is an array",
									"pm.test(\"Get all Morbidities Response is an array\", function () {",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"// Iterate through the array to validate each object",
									"response.forEach(function(item) {",
									"    // Check the presence of all required keys",
									"    pm.test(\"Get all Morbidities - Validate Morbidity key fields \", function () {",
									"        pm.expect(item).to.have.keys([",
									"            'morbidityId',",
									"            'morbidityTestId',",
									"            'morbidityNameRegex',",
									"            'morbidityTestName',",
									"            'morbidityTestUnit',",
									"            'morbidityMarkerMinVal',",
									"            'morbidityMarkerMaxVal'",
									"        ]);",
									"    });",
									"",
									"    // Check the type of each key",
									"    pm.test(\"Type validation for response item keys\", function () {",
									"        pm.expect(item.morbidityId).to.be.a('number');",
									"        pm.expect(item.morbidityTestId).to.be.a('string');",
									"        pm.expect(item.morbidityNameRegex).to.be.a('string');",
									"        pm.expect(item.morbidityTestName).to.be.a('string');",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string');",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number');",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number');",
									"    });",
									"",
									"    // Check accepted values for morbidityTestName",
									"    pm.test(\"Validate accepted values for morbidityTestName\", function () {",
									"        const acceptedValues = [",
									"            \"Fasting Glucose\",\"Average Glucose\", \"Plasma Glucose\", \"HbA1c\", \"TSH\", \"T3\", \"T4\",\"Blood Pressure Levels\"",
									"        ];",
									"        pm.expect(acceptedValues).to.include(item.morbidityTestName);",
									"    });",
									"",
									"    // Check accepted values for morbidityTestUnit",
									"    pm.test(\"Validate accepted values for morbidityTestUnit for \" +item.morbidityTestId, function () {",
									"        const acceptedValues = [",
									"            \"mg/dL\", \"%\", \"μIU/ml\", \"uIU/ml\", \"ng/dL\", \"ng/mL\", \"pg/mL\", \"nmol/L\",\"μg/dL\", \"ug/dL\", \"mm Hg\",\"mIU/L\"",
									"        ];",
									"        pm.expect(acceptedValues).to.include(item.morbidityTestUnit);",
									"    });",
									"",
									"    // Validation: Min value should be less than Max value",
									"    pm.test(\"Min value should be less than Max value for \" +item.morbidityTestId, function () {",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.lessThan(item.morbidityMarkerMaxVal);",
									"    ",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bb4b4f2d-4fdf-4571-a9f8-3a02bb1276ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
					},
					"response": []
				},
				{
					"name": "all_morbidities_admin_invalidUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30ae605c-8c9f-441f-81d5-47b442b5a545",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c488c52-b852-4350-b810-ccc92fd52443",
								"exec": [
									"/*const token = pm.globals.get(\"adminToken\");",
									"console.log(pm.globals.get(\"adminToken\"))",
									"console.log(token);",
									"",
									"if(token) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: `Bearer ${token}`",
									"    });",
									"} else {",
									"    console.error(\"admin token not found in global variables\")",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "667d5bcc-2814-4f49-ab34-f7b2d03efbe5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidit"
					},
					"response": []
				},
				{
					"name": "all_morbidities_dietician_invalidUrl",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2fe57c25-a2e9-4a06-b29f-cabe6168e0e6",
								"exec": [
									"/*const token2 = pm.globals.get(\"dieticianToken\");",
									"if(token2) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: 'Bearer ${token2}'",
									"    });",
									"} else {",
									"    console.error(\"dietician token not found in global variables\")",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "354dfa50-132a-4d9c-90b6-9e113bf34a85",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b1fcc1b8-ef76-4c70-bb55-51c7f1ccf0cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidit"
					},
					"response": []
				},
				{
					"name": "all_morbidities_noToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30ae605c-8c9f-441f-81d5-47b442b5a545",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c488c52-b852-4350-b810-ccc92fd52443",
								"exec": [
									"/*const token = pm.globals.get(\"adminToken\");",
									"console.log(pm.globals.get(\"adminToken\"))",
									"console.log(token);",
									"",
									"if(token) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: `Bearer ${token}`",
									"    });",
									"} else {",
									"    console.error(\"admin token not found in global variables\")",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e6b866bd-87d2-40b3-a384-82ea99924b91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
					},
					"response": []
				},
				{
					"name": "all_morbidities_noToken_invalidUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30ae605c-8c9f-441f-81d5-47b442b5a545",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c488c52-b852-4350-b810-ccc92fd52443",
								"exec": [
									"/*const token = pm.globals.get(\"adminToken\");",
									"console.log(pm.globals.get(\"adminToken\"))",
									"console.log(token);",
									"",
									"if(token) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: `Bearer ${token}`",
									"    });",
									"} else {",
									"    console.error(\"admin token not found in global variables\")",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fcae537d-13af-4423-84a1-8f15e0524cc6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity1"
					},
					"response": []
				},
				{
					"name": "morbidity_byTestname_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bfcca11-34bd-41a0-b319-f4229b5e3b28",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"// Fetch values from json",
									"const expectedValues = pm.variables.get('expectedValue');",
									"",
									"// Parse the response body as JSON",
									"const response = pm.response.json();",
									"",
									"// Loop through each item in the response and validate against expected values",
									"response.forEach(item => {",
									"    const testName = item.morbidityTestName;",
									"    const unit = item.morbidityTestUnit;",
									"    const minVal = item.morbidityMarkerMinVal;",
									"    const maxVal = item.morbidityMarkerMaxVal;",
									"",
									"        // Check if the unit is in the expected values for this testName",
									"        if (expectedValues.hasOwnProperty(unit)) {",
									"            const expected = expectedValues[unit];",
									"",
									"            // Define the test case for this item",
									"            pm.test(`Validate ${testName} with unit ${unit}`, function () {",
									"                pm.expect(minVal).to.eql(expected.min, `Expected min value for ${testName} (${unit}) is ${expected.min}`);",
									"                pm.expect(maxVal).to.eql(expected.max, `Expected max value for ${testName} (${unit}) is ${expected.max}`);",
									"            });",
									"        } else {",
									"            // Log a warning if the unit is not in the expected values for this testName",
									"            pm.test(`Unexpected unit for ${testName}`, function () {",
									"                pm.expect(unit).to.be.oneOf(Object.keys(testExpectedValues), `Unexpected unit: ${unit} for ${testName}`);",
									"            });",
									"        }",
									"  ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "284640f5-79ef-4807-b0ca-74f639c70447",
								"exec": [
									"/*console.log(\"Request Name: \", pm.info.requestName);",
									"// Check if the admin request has been executed",
									"if (!pm.environment.get(\"adminRequestExecuted\")) {",
									"    // If not executed, set the next request to `admin` and exit",
									"    console.log(\"Inside If\")",
									"    pm.execution.setNextRequest('admin_login');",
									"} else {",
									"    // If already executed, proceed with the current request",
									"     console.log(\"Inside else\")",
									"     pm.execution.setNextRequest(null);",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c8f0f952-8d6a-466c-9aac-4b6150206a43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/{{morbidityName}}"
					},
					"response": []
				},
				{
					"name": "morbidity_byTestname_dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bfcca11-34bd-41a0-b319-f4229b5e3b28",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"// Fetch values from json",
									"const expectedValues = pm.variables.get('expectedValue');",
									"",
									"// Parse the response body as JSON",
									"const response = pm.response.json();",
									"",
									"// Loop through each item in the response and validate against expected values",
									"response.forEach(item => {",
									"    const testName = item.morbidityTestName;",
									"    const unit = item.morbidityTestUnit;",
									"    const minVal = item.morbidityMarkerMinVal;",
									"    const maxVal = item.morbidityMarkerMaxVal;",
									"",
									"        // Check if the unit is in the expected values for this testName",
									"        if (expectedValues.hasOwnProperty(unit)) {",
									"            const expected = expectedValues[unit];",
									"",
									"            // Define the test case for this item",
									"            pm.test(`Validate ${testName} with unit ${unit}`, function () {",
									"                pm.expect(minVal).to.eql(expected.min, `Expected min value for ${testName} (${unit}) is ${expected.min}`);",
									"                pm.expect(maxVal).to.eql(expected.max, `Expected max value for ${testName} (${unit}) is ${expected.max}`);",
									"            });",
									"        } else {",
									"            // Log a warning if the unit is not in the expected values for this testName",
									"            pm.test(`Unexpected unit for ${testName}`, function () {",
									"                pm.expect(unit).to.be.oneOf(Object.keys(testExpectedValues), `Unexpected unit: ${unit} for ${testName}`);",
									"            });",
									"        }",
									"  ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "284640f5-79ef-4807-b0ca-74f639c70447",
								"exec": [
									"/*console.log(\"Request Name: \", pm.info.requestName);",
									"// Check if the admin request has been executed",
									"if (!pm.environment.get(\"adminRequestExecuted\")) {",
									"    // If not executed, set the next request to `admin` and exit",
									"    console.log(\"Inside If\")",
									"    pm.execution.setNextRequest('admin_login');",
									"} else {",
									"    // If already executed, proceed with the current request",
									"     console.log(\"Inside else\")",
									"     pm.execution.setNextRequest(null);",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9fb28bbc-494b-44a1-b264-9e053af3f9c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/{{morbidityName}}"
					},
					"response": []
				},
				{
					"name": "morbidity_byTestname_admin_invalidTestname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bfcca11-34bd-41a0-b319-f4229b5e3b28",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"const msg = pm.response.json().errorMessage;",
									"pm.test(`Status code name has string and error message is ${msg}`, function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "284640f5-79ef-4807-b0ca-74f639c70447",
								"exec": [
									"/*console.log(\"Request Name: \", pm.info.requestName);",
									"// Check if the admin request has been executed",
									"if (!pm.environment.get(\"adminRequestExecuted\")) {",
									"    // If not executed, set the next request to `admin` and exit",
									"    console.log(\"Inside If\")",
									"    pm.execution.setNextRequest('admin_login');",
									"} else {",
									"    // If already executed, proceed with the current request",
									"     console.log(\"Inside else\")",
									"     pm.execution.setNextRequest(null);",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8cbf555c-25ff-4927-81a9-537dc6459cf9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/{{morbidityName}}"
					},
					"response": []
				},
				{
					"name": "morbidity_byTestname_dietician_invalidTestname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bfcca11-34bd-41a0-b319-f4229b5e3b28",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"const msg = pm.response.json().errorMessage;",
									"pm.test(`Status code name has string and error message is ${msg}`, function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "284640f5-79ef-4807-b0ca-74f639c70447",
								"exec": [
									"/*console.log(\"Request Name: \", pm.info.requestName);",
									"// Check if the admin request has been executed",
									"if (!pm.environment.get(\"adminRequestExecuted\")) {",
									"    // If not executed, set the next request to `admin` and exit",
									"    console.log(\"Inside If\")",
									"    pm.execution.setNextRequest('admin_login');",
									"} else {",
									"    // If already executed, proceed with the current request",
									"     console.log(\"Inside else\")",
									"     pm.execution.setNextRequest(null);",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1316dec6-fc89-4763-9125-5de8a0fcb75a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/{{morbidityName}}"
					},
					"response": []
				},
				{
					"name": "morbidity_byTestname_noToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bfcca11-34bd-41a0-b319-f4229b5e3b28",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "284640f5-79ef-4807-b0ca-74f639c70447",
								"exec": [
									"/*console.log(\"Request Name: \", pm.info.requestName);",
									"// Check if the admin request has been executed",
									"if (!pm.environment.get(\"adminRequestExecuted\")) {",
									"    // If not executed, set the next request to `admin` and exit",
									"    console.log(\"Inside If\")",
									"    pm.execution.setNextRequest('admin_login');",
									"} else {",
									"    // If already executed, proceed with the current request",
									"     console.log(\"Inside else\")",
									"     pm.execution.setNextRequest(null);",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "52cbd269-1d9d-49b5-950b-07ec58791017",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/t3"
					},
					"response": []
				},
				{
					"name": "morbidity_byTestname_noToken_invalidUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bfcca11-34bd-41a0-b319-f4229b5e3b28",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "284640f5-79ef-4807-b0ca-74f639c70447",
								"exec": [
									"/*console.log(\"Request Name: \", pm.info.requestName);",
									"// Check if the admin request has been executed",
									"if (!pm.environment.get(\"adminRequestExecuted\")) {",
									"    // If not executed, set the next request to `admin` and exit",
									"    console.log(\"Inside If\")",
									"    pm.execution.setNextRequest('admin_login');",
									"} else {",
									"    // If already executed, proceed with the current request",
									"     console.log(\"Inside else\")",
									"     pm.execution.setNextRequest(null);",
									"}*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0017e94c-7f4b-43d1-893e-72efb15d874d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/#"
					},
					"response": []
				}
			],
			"id": "73bdb92c-53ae-47a6-b38b-e33ec885857a",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f97c2973-fc9b-440b-898d-cfc76fd33723",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Load data from file",
							"/*if (typeof pm.variables.get('requestsData') !== 'object') {",
							"    pm.variables.set('requestsData', pm.iterationData.toObject());",
							"}*/",
							"// Retrieve the JSON string from the CSV file",
							"const jsonString = pm.iterationData.get('jsonDataString');",
							"console.log(\"Json String\", jsonString);",
							"",
							"// Parse the JSON string into a JavaScript object",
							"const requestsDataObject = JSON.parse(jsonString);",
							"console.log(\"Json Object\", requestsDataObject);",
							"// Set the parsed JSON object to a Postman variable",
							"pm.variables.set('requestsData', requestsDataObject);",
							"",
							"const requestsData = pm.variables.get('requestsData');",
							"",
							"if (typeof requestsData !== 'object' || Object.keys(requestsData).length === 0) {",
							"    console.log('No external data provided or object is empty.');",
							"    return;",
							"}",
							"",
							"// Find the current request",
							"const currentRequest = requestsData.requests.filter(({name}) => name === pm.info.requestName)[0];",
							"",
							"// Skip the rest since we have no data",
							"if (!currentRequest) {",
							"    console.log(`Request ${pm.info.requestName} has no data defined.`);",
							"    return;",
							"}",
							"",
							"// Expose variables",
							"const variables = currentRequest.data.shift();",
							"",
							"for (const [key,value] of Object.entries(variables)) {",
							"    pm.variables.set(key, value);",
							"}",
							"",
							"pm.variables.set('requestsData', requestsData);",
							"",
							"// Decide where to go next",
							"if (currentRequest.data.length > 0) {",
							"    pm.execution.setNextRequest(pm.info.requestName);",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "935d844b-d0dd-4324-a6a7-e5a1e3368493",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "newrequestBody",
			"value": ""
		},
		{
			"key": "RequestBody",
			"value": ""
		},
		{
			"key": "newRequestBody",
			"value": ""
		}
	]
}